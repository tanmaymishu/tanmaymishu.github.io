<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>metaprogramming - Tag - Tanmay's Website</title><link>https://tanmaymishu.github.io/tags/metaprogramming/</link><description>metaprogramming - Tag - Tanmay's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tanmaymishu@gmail.com (Tanmay)</managingEditor><webMaster>tanmaymishu@gmail.com (Tanmay)</webMaster><lastBuildDate>Wed, 06 May 2020 11:33:00 +0600</lastBuildDate><atom:link href="https://tanmaymishu.github.io/tags/metaprogramming/" rel="self" type="application/rss+xml"/><item><title>Undocumented Laravel: Pipelines</title><link>https://tanmaymishu.github.io/posts/undocumented-laravel-pipelines/</link><pubDate>Wed, 06 May 2020 11:33:00 +0600</pubDate><author>Tanmay</author><guid>https://tanmaymishu.github.io/posts/undocumented-laravel-pipelines/</guid><description>Have you ever wanted to perform a series of tasks/operations on an object (or any type of data) and had to manually build up the process yourself? Did you know that you could easily handle such situations with a pattern that is built into the Laravel framework, called “Pipelines”?
If you’re familiar with the concept of middleware, you already know that when a request enters the application, the request is passed through a series of middleware, traveling from the current middleware to the next.</description></item><item><title>Undocumented Laravel: Macros</title><link>https://tanmaymishu.github.io/posts/undocumented-laravel-macros/</link><pubDate>Tue, 28 Apr 2020 11:31:00 +0600</pubDate><author>Tanmay</author><guid>https://tanmaymishu.github.io/posts/undocumented-laravel-macros/</guid><description><![CDATA[Often in your controller actions or route closures, you may have come across situations where you want to send a JSON response with an HTTP status, especially when you&rsquo;re working with REST APIs:
response()-&gt;json([&#39;message&#39; =&gt; &#39;Unauthorized&#39;], 403); Suddenly you realize that you’re using the same snippet across your application over and over again. Wouldn’t it be nice if you could just write something like this:
response()-&gt;forbid(); &hellip;which actually takes care of building up that JSON response?]]></description></item><item><title>The Anatomy of Laravel's tap() Function</title><link>https://tanmaymishu.github.io/posts/the-anatomy-of-laravels-tap-function/</link><pubDate>Fri, 31 May 2019 19:14:40 +0600</pubDate><author>Tanmay</author><guid>https://tanmaymishu.github.io/posts/the-anatomy-of-laravels-tap-function/</guid><description>If there is one thing I really like about the Laravel PHP Framework, it would be its level of code sophistication, whether it is in something as complex as the ORM or even in something as simple as a helper function. The latter is what this article is about.
Laravel has a Ruby-inspired, higher-order function called tap(). In a nutshell, the tap helper function takes a value and a callback; passes the value to the callback and returns the value.</description></item></channel></rss>